name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


env:
  IMAGE_NAME: paymentservice          # set this to your application's name
  PACKAGE_PATH: 'bin/release'           # set this to the path to build artifact, defaults to the repository root
  DOCKER_FILE: './Payment/PaymentService/dockerfile.release' # set this to the docker file
  

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: Install dependencies
      run: dotnet restore ./Payment/PaymentService.sln
    - name: Build
      run: dotnet build ./Payment/PaymentService.sln  --configuration Release --no-restore
    - name: Test
      run: dotnet test ./Payment/PaymentService.sln  --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov
    


   #   Push image to GitHub Packages.
  push:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101

      - name: Install dependencies
        run: dotnet restore ./Payment/PaymentService.sln
       
      - name: dotnet build and publish
        run: |
          dotnet build ./Payment/PaymentService.sln  --configuration Release --no-restore
          dotnet publish ./Payment/PaymentService.sln -c Release -o '${{ env.PACKAGE_PATH }}/${{ env.IMAGE_NAME }}' 
    

      - name: Upload build dlls
        uses: actions/upload-artifact@v1
        with:
          name: buildll
          path: Payment/PaymentService/bin/Release/netcoreapp3.1/PaymentService.dll


      - name: Download build dlls
        uses: actions/download-artifact@v1
        with:
            name: buildll
         
     # Deploy to docker.pkg.github.com
      - name: Build Docker Image
        run: |
          mkdir -p build/images
          mv buildll/PaymentService.dll build/images
          docker build . --file ${{ env.DOCKER_FILE }}  -t ${{ env.IMAGE_NAME }}
          
      
      - name: Log on to GitHub package registry 
        run: |
          run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          
      - name: Push Docker Image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
            
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

            
          
          
      
